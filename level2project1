import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut } from 'firebase/auth';
import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, deleteDoc, onSnapshot, query, where, addDoc } from 'firebase/firestore';

// --- Icons (lucide-react) ---
const HomeIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>);
const SearchIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>);
const BriefcaseIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"/><rect width="20" height="14" x="2" y="6" rx="2"/><path d="M12 12h.01"/><path d="M12 18h.01"/></svg>);
const UserIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>);
const LogOutIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>);
const XIcon = () => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>);

// --- Helper Functions ---
function getFirebaseConfig() {
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  if (Object.keys(firebaseConfig).length === 0) {
    console.error("Firebase config is not available. Please ensure it's provided by the environment.");
    return null;
  }
  return firebaseConfig;
}

function getAppId() {
  return typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
}

// --- Main App Component ---
function App() {
  const [currentPage, setCurrentPage] = useState('home');
  const [selectedJob, setSelectedJob] = useState(null);
  const [user, setUser] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [userProfile, setUserProfile] = useState(null);
  const [jobs, setJobs] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [modal, setModal] = useState({ visible: false, title: '', content: null });

  const appRef = useRef(null);
  const authRef = useRef(null);
  const dbRef = useRef(null);

  const appId = getAppId();

  // Initialize Firebase and Auth State Listener
  useEffect(() => {
    const firebaseConfig = getFirebaseConfig();
    if (!firebaseConfig) return;

    if (!appRef.current) {
      appRef.current = initializeApp(firebaseConfig);
    }
    if (!authRef.current) {
      authRef.current = getAuth(appRef.current);
    }
    if (!dbRef.current) {
      dbRef.current = getFirestore(appRef.current);
    }

    const auth = authRef.current;
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        setUserId(currentUser.uid);
      } else {
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(auth, initialAuthToken);
          } else {
            const anonymousUser = await signInAnonymously(auth);
            setUser(anonymousUser.user);
            setUserId(anonymousUser.user.uid);
          }
        } catch (error) {
          console.error("Auth failed:", error);
          setUserId('guest');
        }
      }
      setIsAuthReady(true);
    });

    return () => unsubscribe();
  }, []);

  // Fetch User Profile
  useEffect(() => {
    if (!isAuthReady || !dbRef.current || !userId) return;

    const db = dbRef.current;
    const profileDocRef = doc(db, `/artifacts/${appId}/users/${userId}/profile`, 'data');

    const unsubscribe = onSnapshot(profileDocRef, (docSnap) => {
      if (docSnap.exists()) {
        setUserProfile(docSnap.data());
      } else {
        setUserProfile({ isEmployer: false });
        // Create initial profile for new users
        setDoc(profileDocRef, { isEmployer: false, name: `User_${userId.substring(0, 6)}` }).catch(console.error);
      }
    }, console.error);

    return () => unsubscribe();
  }, [isAuthReady, userId, appId]);

  // Fetch Jobs
  useEffect(() => {
    if (!isAuthReady || !dbRef.current) return;

    const db = dbRef.current;
    const jobsCollectionRef = collection(db, `/artifacts/${appId}/public/data/jobs`);

    const unsubscribe = onSnapshot(jobsCollectionRef, (querySnapshot) => {
      const jobsData = [];
      querySnapshot.forEach((doc) => {
        jobsData.push({ id: doc.id, ...doc.data() });
      });
      setJobs(jobsData);
    }, console.error);

    return () => unsubscribe();
  }, [isAuthReady, appId]);


  // Navigation Handlers
  const navigateTo = (page, data = null) => {
    setCurrentPage(page);
    setSelectedJob(data);
  };

  const filteredJobs = jobs.filter(job =>
    job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    job.company.toLowerCase().includes(searchQuery.toLowerCase()) ||
    job.location.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const openModal = (title, content) => setModal({ visible: true, title, content });
  const closeModal = () => setModal({ visible: false, title: '', content: null });

  const handleLogout = async () => {
    const auth = authRef.current;
    if (auth) {
      try {
        await signOut(auth);
        navigateTo('home');
      } catch (error) {
        console.error("Logout failed:", error);
      }
    }
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'home':
        return <HomePage navigateTo={navigateTo} jobs={jobs.slice(0, 3)} />;
      case 'listings':
        return <JobListingPage jobs={filteredJobs} navigateTo={navigateTo} searchQuery={searchQuery} setSearchQuery={setSearchQuery} />;
      case 'job-detail':
        return <JobDetailPage job={selectedJob} navigateTo={navigateTo} userId={userId} openModal={openModal} />;
      case 'employer-dashboard':
        return <EmployerDashboard userId={userId} openModal={openModal} />;
      case 'candidate-dashboard':
        return <CandidateDashboard userId={userId} openModal={openModal} />;
      default:
        return <HomePage navigateTo={navigateTo} jobs={jobs.slice(0, 3)} />;
    }
  };

  if (!isAuthReady) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
        <div className="text-xl font-semibold text-gray-700 dark:text-gray-300">Loading...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex flex-col">
      <Header
        navigateTo={navigateTo}
        userProfile={userProfile}
        handleLogout={handleLogout}
        userId={userId}
      />
      <main className="flex-grow p-4 md:p-8 container mx-auto">
        {renderPage()}
      </main>
      <Footer />
      <ModalComponent modal={modal} closeModal={closeModal} />
    </div>
  );
}

// --- Header Component ---
const Header = ({ navigateTo, userProfile, handleLogout, userId }) => {
  const isEmployer = userProfile?.isEmployer;

  return (
    <header className="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-50">
      <div className="container mx-auto flex flex-col md:flex-row items-center justify-between p-4 md:p-6">
        <h1 className="text-2xl font-bold text-indigo-600 dark:text-indigo-400">
          <button onClick={() => navigateTo('home')}>JobFinder</button>
        </h1>
        <nav className="flex items-center space-x-2 md:space-x-4 mt-2 md:mt-0">
          <NavLink onClick={() => navigateTo('home')} icon={<HomeIcon />} text="Home" />
          <NavLink onClick={() => navigateTo('listings')} icon={<SearchIcon />} text="Jobs" />
          {userProfile && (
            <NavLink onClick={() => navigateTo(isEmployer ? 'employer-dashboard' : 'candidate-dashboard')} icon={isEmployer ? <BriefcaseIcon /> : <UserIcon />} text="Dashboard" />
          )}
          {userProfile && (
            <button
              onClick={handleLogout}
              className="flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors hover:bg-red-500 hover:text-white"
            >
              <LogOutIcon className="w-4 h-4" />
              <span>Log out</span>
            </button>
          )}
        </nav>
      </div>
      <div className="bg-gray-100 dark:bg-gray-700 p-2 text-center text-xs text-gray-600 dark:text-gray-400">
        Your User ID: <span className="font-mono font-bold text-gray-900 dark:text-gray-50">{userId}</span>
      </div>
    </header>
  );
};

// --- NavLink Component ---
const NavLink = ({ onClick, icon, text }) => (
  <button
    onClick={onClick}
    className="flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors hover:bg-gray-200 dark:hover:bg-gray-700"
  >
    {icon}
    <span>{text}</span>
  </button>
);

// --- Pages and Components ---
const HomePage = ({ navigateTo, jobs }) => (
  <div className="text-center p-8 rounded-xl bg-white dark:bg-gray-800 shadow-lg">
    <h2 className="text-4xl font-extrabold text-gray-900 dark:text-white mb-4">Welcome to JobFinder!</h2>
    <p className="text-lg text-gray-600 dark:text-gray-400 mb-8">Your next career opportunity is just a click away.</p>
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {jobs.map(job => (
        <JobCard key={job.id} job={job} navigateTo={navigateTo} />
      ))}
    </div>
    <div className="mt-8">
      <button onClick={() => navigateTo('listings')} className="bg-indigo-600 text-white font-bold py-3 px-6 rounded-full shadow-lg hover:bg-indigo-700 transition duration-300">
        Browse All Jobs
      </button>
    </div>
  </div>
);

const JobListingPage = ({ jobs, navigateTo, searchQuery, setSearchQuery }) => (
  <div>
    <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Job Listings</h2>
    <div className="mb-6">
      <div className="relative rounded-md shadow-sm">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <SearchIcon className="h-5 w-5 text-gray-400" />
        </div>
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search for jobs..."
          className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
        />
      </div>
    </div>
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {jobs.length > 0 ? (
        jobs.map(job => <JobCard key={job.id} job={job} navigateTo={navigateTo} />)
      ) : (
        <p className="col-span-3 text-center text-gray-600 dark:text-gray-400">No jobs found. Try a different search.</p>
      )}
    </div>
  </div>
);

const JobCard = ({ job, navigateTo }) => (
  <div
    onClick={() => navigateTo('job-detail', job)}
    className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-200 cursor-pointer"
  >
    <h3 className="text-xl font-bold text-indigo-600 dark:text-indigo-400 mb-1">{job.title}</h3>
    <p className="text-gray-700 dark:text-gray-300 text-sm mb-2">{job.company}</p>
    <p className="text-gray-500 dark:text-gray-400 text-sm">{job.location}</p>
  </div>
);

const JobDetailPage = ({ job, navigateTo, userId, openModal }) => {
  if (!job) {
    return (
      <div className="text-center p-8">
        <h2 className="text-2xl font-bold mb-4">Job not found.</h2>
        <button onClick={() => navigateTo('listings')} className="text-indigo-600 dark:text-indigo-400 hover:underline">Back to listings</button>
      </div>
    );
  }

  const handleApply = async () => {
    const db = getFirestore();
    const appId = getAppId();
    try {
      await addDoc(collection(db, `/artifacts/${appId}/public/data/applications`), {
        jobId: job.id,
        candidateUserId: userId,
        appliedAt: new Date(),
        status: 'Applied',
      });
      openModal('Application Submitted', 'Your application has been successfully submitted! We will notify you of any updates.');
    } catch (error) {
      console.error("Error applying for job:", error);
      openModal('Application Failed', 'There was an error submitting your application. Please try again later.');
    }
  };

  return (
    <div className="p-8 rounded-xl bg-white dark:bg-gray-800 shadow-lg max-w-4xl mx-auto">
      <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">{job.title}</h2>
      <p className="text-xl text-indigo-600 dark:text-indigo-400 mb-4">{job.company} - {job.location}</p>
      <div className="prose dark:prose-invert max-w-none">
        <h3 className="text-2xl font-semibold mt-6 mb-2">Job Description</h3>
        <p className="text-gray-700 dark:text-gray-300 whitespace-pre-wrap">{job.description}</p>
      </div>
      <div className="mt-8 flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4">
        <button
          onClick={handleApply}
          className="w-full md:w-auto bg-indigo-600 text-white font-bold py-3 px-6 rounded-full shadow-lg hover:bg-indigo-700 transition duration-300"
        >
          Apply Now
        </button>
        <button
          onClick={() => navigateTo('listings')}
          className="w-full md:w-auto text-gray-600 dark:text-gray-400 font-bold py-3 px-6 rounded-full border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-300"
        >
          Back to Listings
        </button>
      </div>
    </div>
  );
};

const EmployerDashboard = ({ userId, openModal }) => {
  const [myJobs, setMyJobs] = useState([]);
  const [jobForm, setJobForm] = useState({ id: null, title: '', company: '', location: '', description: '' });
  const [isEditMode, setIsEditMode] = useState(false);
  const [applications, setApplications] = useState([]);

  const db = getFirestore();
  const appId = getAppId();

  // Fetch my jobs
  useEffect(() => {
    if (!userId) return;
    const jobsCollectionRef = collection(db, `/artifacts/${appId}/public/data/jobs`);
    const q = query(jobsCollectionRef, where('postedByUserId', '==', userId));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const jobsData = [];
      querySnapshot.forEach((doc) => {
        jobsData.push({ id: doc.id, ...doc.data() });
      });
      setMyJobs(jobsData);
    }, console.error);
    return () => unsubscribe();
  }, [userId, db, appId]);

  // Fetch applications for my jobs
  useEffect(() => {
    if (!myJobs.length) {
      setApplications([]);
      return;
    }
    const applicationsCollectionRef = collection(db, `/artifacts/${appId}/public/data/applications`);
    const jobIds = myJobs.map(job => job.id);
    const q = query(applicationsCollectionRef, where('jobId', 'in', jobIds));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const applicationsData = [];
      querySnapshot.forEach((doc) => {
        applicationsData.push({ id: doc.id, ...doc.data() });
      });
      setApplications(applicationsData);
    }, console.error);
    return () => unsubscribe();
  }, [myJobs, db, appId]);


  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setJobForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmitJob = async (e) => {
    e.preventDefault();
    try {
      if (isEditMode) {
        const jobDocRef = doc(db, `/artifacts/${appId}/public/data/jobs`, jobForm.id);
        await updateDoc(jobDocRef, jobForm);
        openModal('Job Updated', 'The job listing has been updated successfully.');
      } else {
        await addDoc(collection(db, `/artifacts/${appId}/public/data/jobs`), {
          ...jobForm,
          postedByUserId: userId,
          postedAt: new Date(),
        });
        openModal('Job Posted', 'Your new job listing has been posted!');
      }
      setJobForm({ id: null, title: '', company: '', location: '', description: '' });
      setIsEditMode(false);
    } catch (error) {
      console.error("Error posting/updating job:", error);
      openModal('Error', 'Failed to save job listing. Please try again.');
    }
  };

  const handleEditJob = (job) => {
    setJobForm(job);
    setIsEditMode(true);
  };

  const handleDeleteJob = async (jobId) => {
    try {
      const jobDocRef = doc(db, `/artifacts/${appId}/public/data/jobs`, jobId);
      await deleteDoc(jobDocRef);
      openModal('Job Deleted', 'The job listing has been successfully deleted.');
    } catch (error) {
      console.error("Error deleting job:", error);
      openModal('Error', 'Failed to delete job listing. Please try again.');
    }
  };

  return (
    <div className="p-8 rounded-xl bg-white dark:bg-gray-800 shadow-lg">
      <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Employer Dashboard</h2>

      <div className="mb-8 p-6 rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900">
        <h3 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">{isEditMode ? 'Edit Job' : 'Post a New Job'}</h3>
        <form onSubmit={handleSubmitJob} className="space-y-4">
          <input
            type="text"
            name="title"
            value={jobForm.title}
            onChange={handleFormChange}
            placeholder="Job Title"
            required
            className="w-full px-4 py-2 border rounded-lg dark:bg-gray-800 dark:text-white"
          />
          <input
            type="text"
            name="company"
            value={jobForm.company}
            onChange={handleFormChange}
            placeholder="Company Name"
            required
            className="w-full px-4 py-2 border rounded-lg dark:bg-gray-800 dark:text-white"
          />
          <input
            type="text"
            name="location"
            value={jobForm.location}
            onChange={handleFormChange}
            placeholder="Location"
            required
            className="w-full px-4 py-2 border rounded-lg dark:bg-gray-800 dark:text-white"
          />
          <textarea
            name="description"
            value={jobForm.description}
            onChange={handleFormChange}
            placeholder="Job Description"
            rows="6"
            required
            className="w-full px-4 py-2 border rounded-lg dark:bg-gray-800 dark:text-white"
          ></textarea>
          <div className="flex space-x-4">
            <button type="submit" className="bg-indigo-600 text-white font-bold py-2 px-4 rounded-full hover:bg-indigo-700 transition">
              {isEditMode ? 'Update Job' : 'Post Job'}
            </button>
            {isEditMode && (
              <button
                type="button"
                onClick={() => {
                  setJobForm({ id: null, title: '', company: '', location: '', description: '' });
                  setIsEditMode(false);
                }}
                className="bg-gray-400 text-white font-bold py-2 px-4 rounded-full hover:bg-gray-500 transition"
              >
                Cancel
              </button>
            )}
          </div>
        </form>
      </div>

      <h3 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">My Posted Jobs</h3>
      {myJobs.length > 0 ? (
        <div className="space-y-4">
          {myJobs.map(job => (
            <div key={job.id} className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm flex flex-col md:flex-row justify-between items-start md:items-center">
              <div>
                <h4 className="font-bold text-lg">{job.title}</h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">{job.location}</p>
                <div className="mt-2 text-sm text-gray-700 dark:text-gray-300">
                  <p>{applications.filter(app => app.jobId === job.id).length} applications</p>
                </div>
              </div>
              <div className="mt-2 md:mt-0 flex space-x-2">
                <button onClick={() => handleEditJob(job)} className="bg-yellow-500 text-white py-1 px-3 rounded-full text-sm hover:bg-yellow-600 transition">Edit</button>
                <button onClick={() => handleDeleteJob(job.id)} className="bg-red-500 text-white py-1 px-3 rounded-full text-sm hover:bg-red-600 transition">Delete</button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-gray-600 dark:text-gray-400">You haven't posted any jobs yet.</p>
      )}
    </div>
  );
};

const CandidateDashboard = ({ userId, openModal }) => {
  const [appliedJobs, setAppliedJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const db = getFirestore();
  const appId = getAppId();

  useEffect(() => {
    if (!userId) return;

    const applicationsCollectionRef = collection(db, `/artifacts/${appId}/public/data/applications`);
    const q = query(applicationsCollectionRef, where('candidateUserId', '==', userId));

    const unsubscribe = onSnapshot(q, async (querySnapshot) => {
      const jobIds = querySnapshot.docs.map(doc => doc.data().jobId);
      const uniqueJobIds = [...new Set(jobIds)];
      
      const jobsData = [];
      if (uniqueJobIds.length > 0) {
        const jobsRef = collection(db, `/artifacts/${appId}/public/data/jobs`);
        const jobsPromise = uniqueJobIds.map(async id => {
          const docSnap = await getDoc(doc(jobsRef, id));
          return docSnap.exists() ? { id: docSnap.id, ...docSnap.data() } : null;
        });
        const fetchedJobs = await Promise.all(jobsPromise);
        jobsData.push(...fetchedJobs.filter(Boolean));
      }
      setAppliedJobs(jobsData);
      setLoading(false);
    }, console.error);

    return () => unsubscribe();
  }, [userId, db, appId]);

  return (
    <div className="p-8 rounded-xl bg-white dark:bg-gray-800 shadow-lg">
      <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Candidate Dashboard</h2>
      <h3 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Your Applications</h3>
      {loading ? (
        <p>Loading your applications...</p>
      ) : appliedJobs.length > 0 ? (
        <div className="space-y-4">
          {appliedJobs.map(job => (
            <div key={job.id} className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-sm">
              <h4 className="font-bold text-lg">{job.title}</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400">{job.company} - {job.location}</p>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-gray-600 dark:text-gray-400">You haven't applied for any jobs yet.</p>
      )}
    </div>
  );
};

// --- Footer Component ---
const Footer = () => (
  <footer className="bg-gray-200 dark:bg-gray-800 p-4 text-center text-sm text-gray-600 dark:text-gray-400 mt-8">
    &copy; {new Date().getFullYear()} JobFinder. All rights reserved.
  </footer>
);

// --- Modal Component ---
const ModalComponent = ({ modal, closeModal }) => {
  if (!modal.visible) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full relative">
        <button onClick={closeModal} className="absolute top-2 right-2 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
          <XIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
        </button>
        <h3 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">{modal.title}</h3>
        <p className="text-gray-700 dark:text-gray-300">{modal.content}</p>
        <div className="mt-6 text-right">
          <button onClick={closeModal} className="bg-indigo-600 text-white font-bold py-2 px-4 rounded-full hover:bg-indigo-700 transition">
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;

